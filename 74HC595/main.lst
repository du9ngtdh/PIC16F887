CCS PCM C Compiler, Version 5.025, 39025               04-Oct-22 13:38

               Filename:   C:\Users\du9ng\StudioProjects\PIC16F887\74HC595\main.lst

               ROM used:   272 words (3%)
                           Largest free fragment is 2048
               RAM used:   11 (3%) at main() level
                           21 (6%) worst case
               Stack used: 3 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0E8
0003:  NOP
.................... #include <main.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  MOVF   2C,W
0005:  ANDLW  07
0006:  MOVWF  77
0007:  RRF    2C,W
0008:  MOVWF  78
0009:  RRF    78,F
000A:  RRF    78,F
000B:  MOVLW  1F
000C:  ANDWF  78,F
000D:  MOVF   78,W
000E:  ADDWF  2E,W
000F:  MOVWF  04
0010:  BCF    03.7
0011:  BTFSC  2F.0
0012:  BSF    03.7
0013:  CLRF   78
0014:  INCF   78,F
0015:  INCF   77,F
0016:  GOTO   018
0017:  RLF    78,F
0018:  DECFSZ 77,F
0019:  GOTO   017
001A:  MOVF   2D,F
001B:  BTFSC  03.2
001C:  GOTO   020
001D:  MOVF   78,W
001E:  IORWF  00,F
001F:  GOTO   023
0020:  COMF   78,F
0021:  MOVF   78,W
0022:  ANDWF  00,F
0023:  RETURN
*
00E0:  BCF    0A.0
00E1:  BCF    0A.1
00E2:  BCF    0A.2
00E3:  ADDWF  02,F
00E4:  GOTO   0C1
00E5:  GOTO   0C7
00E6:  GOTO   0D0
00E7:  GOTO   0D6
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
009B:  MOVLW  27
009C:  MOVWF  04
009D:  BCF    03.7
009E:  MOVF   00,W
009F:  BTFSC  03.2
00A0:  GOTO   0AE
00A1:  MOVLW  06
00A2:  MOVWF  78
00A3:  CLRF   77
00A4:  DECFSZ 77,F
00A5:  GOTO   0A4
00A6:  DECFSZ 78,F
00A7:  GOTO   0A3
00A8:  MOVLW  7B
00A9:  MOVWF  77
00AA:  DECFSZ 77,F
00AB:  GOTO   0AA
00AC:  DECFSZ 00,F
00AD:  GOTO   0A1
....................  
....................  
.................... #include "my_logic.h" 
.................... #include "my_74hc595.h" 
....................  
.................... int _pin_data = PIN_D0; 
.................... int _pin_ck = PIN_D1; 
.................... int _pic_chot = PIN_D2; 
.................... void ___send_ck(int pin) 
.................... { 
....................       output_bit(pin,0); 
*
0024:  MOVF   2B,W
0025:  MOVWF  2C
0026:  CLRF   2D
0027:  CLRF   2F
0028:  CLRF   2E
0029:  CALL   004
002A:  MOVF   2B,W
002B:  MOVWF  2C
002C:  CLRF   2D
002D:  CLRF   2F
002E:  MOVLW  80
002F:  MOVWF  2E
0030:  CALL   004
....................       output_bit(pin,1); 
0031:  MOVF   2B,W
0032:  MOVWF  2C
0033:  MOVLW  01
0034:  MOVWF  2D
0035:  CLRF   2F
0036:  CLRF   2E
0037:  CALL   004
0038:  MOVF   2B,W
0039:  MOVWF  2C
003A:  CLRF   2D
003B:  CLRF   2F
003C:  MOVLW  80
003D:  MOVWF  2E
003E:  CALL   004
003F:  RETURN
.................... } 
.................... // this function send 1byte to ic 
.................... void ___send_byte_to_ic(char value) 
.................... { 
....................     for (int i = 0; i < 8; i++) 
0040:  CLRF   2A
0041:  MOVF   2A,W
0042:  SUBLW  07
0043:  BTFSS  03.0
0044:  GOTO   06A
....................     { 
....................           output_bit(_pin_data,(value >> i)%2 != 0); 
0045:  MOVF   29,W
0046:  MOVWF  77
0047:  MOVF   2A,W
0048:  MOVWF  78
0049:  BTFSC  03.2
004A:  GOTO   04F
004B:  BCF    03.0
004C:  RRF    77,F
004D:  DECFSZ 78,F
004E:  GOTO   04B
004F:  MOVF   77,W
0050:  ANDLW  01
0051:  BTFSS  03.2
0052:  GOTO   055
0053:  MOVLW  00
0054:  GOTO   056
0055:  MOVLW  01
0056:  MOVWF  77
0057:  MOVF   20,W
0058:  MOVWF  2C
0059:  MOVF   77,W
005A:  MOVWF  2D
005B:  CLRF   2F
005C:  CLRF   2E
005D:  CALL   004
005E:  MOVF   20,W
005F:  MOVWF  2C
0060:  CLRF   2D
0061:  CLRF   2F
0062:  MOVLW  80
0063:  MOVWF  2E
0064:  CALL   004
....................           ___send_ck(_pin_ck); 
0065:  MOVF   21,W
0066:  MOVWF  2B
0067:  CALL   024
0068:  INCF   2A,F
0069:  GOTO   041
....................     } 
006A:  RETURN
.................... } 
....................  
.................... // this function send 1 byte to one for the four ic 
.................... void OUTPUT_to_2_74HC595(int8 value,int8 value2) 
.................... {   
....................      ___send_byte_to_ic(value2); 
*
00B2:  MOVF   28,W
00B3:  MOVWF  29
00B4:  CALL   040
....................      ___send_byte_to_ic(value); 
00B5:  MOVF   27,W
00B6:  MOVWF  29
00B7:  CALL   040
....................      ___send_ck(_pic_chot); 
00B8:  MOVF   22,W
00B9:  MOVWF  2B
00BA:  CALL   024
.................... } 
....................  
....................  
....................  
.................... typedef struct  
.................... { 
....................     int ic_1; 
....................     int ic_2; 
....................     int mode; 
.................... } sLogic; 
....................  sLogic logic  = {0xff,0xff,0}; 
*
0101:  MOVLW  FF
0102:  BCF    03.6
0103:  MOVWF  23
0104:  MOVWF  24
0105:  CLRF   25
....................  
....................  
.................... void _dao_byte(char* value) 
.................... { 
.................... *value = ~*value; 
*
007B:  MOVF   27,W
007C:  MOVWF  04
007D:  BCF    03.7
007E:  BTFSC  28.0
007F:  BSF    03.7
0080:  MOVF   00,W
0081:  XORLW  FF
0082:  MOVWF  2B
0083:  MOVF   27,W
0084:  MOVWF  04
0085:  BCF    03.7
0086:  BTFSC  28.0
0087:  BSF    03.7
0088:  MOVF   2B,W
0089:  MOVWF  00
008A:  RETURN
.................... } 
.................... void _dao_2byte() 
.................... { 
....................   _dao_byte(&logic.ic_1); 
008B:  CLRF   28
008C:  MOVLW  23
008D:  MOVWF  27
008E:  CALL   07B
....................   _dao_byte(&logic.ic_2); 
008F:  CLRF   28
0090:  MOVLW  24
0091:  MOVWF  27
0092:  CALL   07B
0093:  RETURN
.................... } 
.................... void _dich_in() 
.................... { 
....................       logic.ic_1>>=1; 
*
006B:  BCF    03.0
006C:  RRF    23,F
....................       logic.ic_2<<=1; 
006D:  BCF    03.0
006E:  RLF    24,F
006F:  RETURN
.................... } 
.................... void _dich_out() 
.................... { 
....................          logic.ic_1<<=1; 
*
0094:  BCF    03.0
0095:  RLF    23,F
....................          logic.ic_2>>=1; 
0096:  BCF    03.0
0097:  RRF    24,F
0098:  RETURN
.................... } 
.................... void _set_mode(int8 dk,  int number_mode) 
.................... { 
....................    if(logic.ic_1 ==logic.ic_2 && logic.ic_2 == dk) logic.mode = number_mode; 
*
0070:  MOVF   24,W
0071:  SUBWF  23,W
0072:  BTFSS  03.2
0073:  GOTO   07A
0074:  MOVF   27,W
0075:  SUBWF  24,W
0076:  BTFSS  03.2
0077:  GOTO   07A
0078:  MOVF   28,W
0079:  MOVWF  25
007A:  RETURN
.................... } 
.................... void mode_0(){ 
....................       _dich_in(); 
*
00C1:  CALL   06B
....................       _set_mode(0, 1); 
00C2:  CLRF   27
00C3:  MOVLW  01
00C4:  MOVWF  28
00C5:  CALL   070
.................... } 
....................  
.................... void mode_1(){ 
....................          _dao_2byte(); 
*
00C7:  CALL   08B
....................          _dich_out(); 
00C8:  CALL   094
....................          _dao_2byte(); 
00C9:  CALL   08B
....................          _set_mode(0xff,2); 
00CA:  MOVLW  FF
00CB:  MOVWF  27
00CC:  MOVLW  02
00CD:  MOVWF  28
00CE:  CALL   070
.................... } 
....................  
.................... void mode_2(){ 
....................         _dich_out(); 
*
00D0:  CALL   094
....................          _set_mode( 0,3); 
00D1:  CLRF   27
00D2:  MOVLW  03
00D3:  MOVWF  28
00D4:  CALL   070
.................... } 
.................... void mode_3(){ 
....................          _dao_2byte(); 
*
00D6:  CALL   08B
....................          _dich_in(); 
00D7:  CALL   06B
....................          _dao_2byte();   
00D8:  CALL   08B
....................       _set_mode(0xff,0); 
00D9:  MOVLW  FF
00DA:  MOVWF  27
00DB:  CLRF   28
00DC:  CALL   070
.................... } 
....................  
....................  
.................... void loop_logic(int x){ 
....................      delay_ms(x); 
*
0099:  MOVF   26,W
009A:  MOVWF  27
....................     OUTPUT_to_2_74HC595(logic.ic_1,logic.ic_2); 
*
00AE:  MOVF   23,W
00AF:  MOVWF  27
00B0:  MOVF   24,W
00B1:  MOVWF  28
....................     switch(logic.mode) 
*
00BB:  MOVF   25,W
00BC:  ADDLW  FC
00BD:  BTFSC  03.0
00BE:  GOTO   0DD
00BF:  ADDLW  04
00C0:  GOTO   0E0
....................       { 
....................       case 0: 
....................          mode_0(); 
....................          break; 
*
00C6:  GOTO   0DD
....................       case 1: 
....................          mode_1(); 
....................          break; 
*
00CF:  GOTO   0DD
....................       case 2: 
....................          mode_2(); 
....................          break; 
*
00D5:  GOTO   0DD
....................       case 3: 
....................          mode_3(); 
....................          break; 
....................       }//switch 
*
00DD:  BCF    0A.3
00DE:  BCF    0A.4
00DF:  GOTO   10D (RETURN)
....................    } 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... void main() 
*
00E8:  MOVF   03,W
00E9:  ANDLW  1F
00EA:  MOVWF  03
00EB:  MOVLW  40
00EC:  MOVWF  20
00ED:  MOVLW  41
00EE:  MOVWF  21
00EF:  MOVLW  42
00F0:  MOVWF  22
00F1:  BSF    03.5
00F2:  BSF    03.6
00F3:  MOVF   09,W
00F4:  ANDLW  C0
00F5:  MOVWF  09
00F6:  BCF    03.6
00F7:  BCF    1F.4
00F8:  BCF    1F.5
00F9:  MOVLW  00
00FA:  BSF    03.6
00FB:  MOVWF  08
00FC:  BCF    03.5
00FD:  CLRF   07
00FE:  CLRF   08
00FF:  CLRF   09
0100:  BCF    03.7
.................... { 
....................        
....................  
....................    set_tris_d(~0x07); 
*
0106:  MOVLW  F8
0107:  BSF    03.5
0108:  MOVWF  08
....................    while(TRUE) 
....................    {   
....................       loop_logic(40); 
0109:  MOVLW  28
010A:  BCF    03.5
010B:  MOVWF  26
010C:  GOTO   099
010D:  BSF    03.5
010E:  GOTO   109
....................     }//while 
....................  }//main 
....................  
010F:  SLEEP
....................  

Configuration Fuses:
   Word  1: 2CE2   HS NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
