CCS PCM C Compiler, Version 5.025, 39025               30-Sep-22 16:48

               Filename:   C:\Users\du9ng\StudioProjects\PIC16F887\74HC595\main.lst

               ROM used:   342 words (4%)
                           Largest free fragment is 2048
               RAM used:   12 (3%) at main() level
                           25 (7%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0CD
0003:  NOP
.................... #include <main.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  MOVF   30,W
0005:  ANDLW  07
0006:  MOVWF  77
0007:  RRF    30,W
0008:  MOVWF  78
0009:  RRF    78,F
000A:  RRF    78,F
000B:  MOVLW  1F
000C:  ANDWF  78,F
000D:  MOVF   78,W
000E:  ADDWF  32,W
000F:  MOVWF  04
0010:  BCF    03.7
0011:  BTFSC  33.0
0012:  BSF    03.7
0013:  CLRF   78
0014:  INCF   78,F
0015:  INCF   77,F
0016:  GOTO   018
0017:  RLF    78,F
0018:  DECFSZ 77,F
0019:  GOTO   017
001A:  MOVF   31,F
001B:  BTFSC  03.2
001C:  GOTO   020
001D:  MOVF   78,W
001E:  IORWF  00,F
001F:  GOTO   023
0020:  COMF   78,F
0021:  MOVF   78,W
0022:  ANDWF  00,F
0023:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
00B9:  MOVLW  2A
00BA:  MOVWF  04
00BB:  BCF    03.7
00BC:  MOVF   00,W
00BD:  BTFSC  03.2
00BE:  GOTO   0CC
00BF:  MOVLW  06
00C0:  MOVWF  78
00C1:  CLRF   77
00C2:  DECFSZ 77,F
00C3:  GOTO   0C2
00C4:  DECFSZ 78,F
00C5:  GOTO   0C1
00C6:  MOVLW  7B
00C7:  MOVWF  77
00C8:  DECFSZ 77,F
00C9:  GOTO   0C8
00CA:  DECFSZ 00,F
00CB:  GOTO   0BF
00CC:  RETURN
....................  
....................  
.................... #include "my_74hc595.h" 
.................... int send_74hc595_pin_data = PIN_D0; 
.................... int ck_74hc595_pin = PIN_D1; 
.................... int update_74hc595 = PIN_D2; 
.................... int ___ic_value[4] = {0,0,0,0}; 
*
00E6:  BCF    03.6
00E7:  CLRF   23
00E8:  CLRF   24
00E9:  CLRF   25
00EA:  CLRF   26
.................... // this function send one bit to ic 
.................... void ___send_bit_to_ic(int1 value) 
.................... { 
....................     //write code send one bit to ic here 
....................     output_bit(send_74hc595_pin_data,value); 
*
0024:  MOVF   2F,F
0025:  BTFSS  03.2
0026:  GOTO   029
0027:  MOVLW  00
0028:  GOTO   02A
0029:  MOVLW  01
002A:  MOVWF  77
002B:  MOVF   20,W
002C:  MOVWF  30
002D:  MOVF   77,W
002E:  MOVWF  31
002F:  CLRF   33
0030:  CLRF   32
0031:  CALL   004
0032:  MOVF   20,W
0033:  MOVWF  30
0034:  CLRF   31
0035:  CLRF   33
0036:  MOVLW  80
0037:  MOVWF  32
0038:  CALL   004
....................     //delay_ms(1); 
....................     output_bit(ck_74hc595_pin,1); 
0039:  MOVF   21,W
003A:  MOVWF  30
003B:  MOVLW  01
003C:  MOVWF  31
003D:  CLRF   33
003E:  CLRF   32
003F:  CALL   004
0040:  MOVF   21,W
0041:  MOVWF  30
0042:  CLRF   31
0043:  CLRF   33
0044:  MOVLW  80
0045:  MOVWF  32
0046:  CALL   004
....................     //delay_ms(1); 
....................     output_bit(ck_74hc595_pin,0); 
0047:  MOVF   21,W
0048:  MOVWF  30
0049:  CLRF   31
004A:  CLRF   33
004B:  CLRF   32
004C:  CALL   004
004D:  MOVF   21,W
004E:  MOVWF  30
004F:  CLRF   31
0050:  CLRF   33
0051:  MOVLW  80
0052:  MOVWF  32
0053:  CALL   004
....................     //delay_ms(1); 
....................     output_bit(ck_74hc595_pin,1); 
0054:  MOVF   21,W
0055:  MOVWF  30
0056:  MOVLW  01
0057:  MOVWF  31
0058:  CLRF   33
0059:  CLRF   32
005A:  CALL   004
005B:  MOVF   21,W
005C:  MOVWF  30
005D:  CLRF   31
005E:  CLRF   33
005F:  MOVLW  80
0060:  MOVWF  32
0061:  CALL   004
0062:  RETURN
....................      
.................... } 
....................  
.................... // this function updates all bits of ic 
.................... void ___upload_value_ic() 
.................... { 
....................     //write code upload value to ic here 
....................     output_bit(update_74hc595,1); 
*
008F:  MOVF   22,W
0090:  MOVWF  30
0091:  MOVLW  01
0092:  MOVWF  31
0093:  CLRF   33
0094:  CLRF   32
0095:  CALL   004
0096:  MOVF   22,W
0097:  MOVWF  30
0098:  CLRF   31
0099:  CLRF   33
009A:  MOVLW  80
009B:  MOVWF  32
009C:  CALL   004
....................     //delay_ms(1); 
....................     output_bit(update_74hc595,0); 
009D:  MOVF   22,W
009E:  MOVWF  30
009F:  CLRF   31
00A0:  CLRF   33
00A1:  CLRF   32
00A2:  CALL   004
00A3:  MOVF   22,W
00A4:  MOVWF  30
00A5:  CLRF   31
00A6:  CLRF   33
00A7:  MOVLW  80
00A8:  MOVWF  32
00A9:  CALL   004
....................     //delay_ms(1); 
....................     output_bit(update_74hc595,1); 
00AA:  MOVF   22,W
00AB:  MOVWF  30
00AC:  MOVLW  01
00AD:  MOVWF  31
00AE:  CLRF   33
00AF:  CLRF   32
00B0:  CALL   004
00B1:  MOVF   22,W
00B2:  MOVWF  30
00B3:  CLRF   31
00B4:  CLRF   33
00B5:  MOVLW  80
00B6:  MOVWF  32
00B7:  CALL   004
....................    
.................... } 
.................... // this function send 1byte to ic 
.................... void ___send_byte_to_ic(char value) 
*
0063:  MOVF   2C,W
0064:  MOVWF  2D
.................... { 
....................     //create a variable to store the value 
....................     char buffer = value; 
....................  
....................     //this loop runs eight times to send eight bit data 
....................     for (int i = 0; i < 8; i++) 
0065:  CLRF   2E
0066:  MOVF   2E,W
0067:  SUBLW  07
0068:  BTFSS  03.0
0069:  GOTO   07B
....................     { 
....................         if (buffer % 2 == 0) // if buffer divided by 2 then send bit 0 
006A:  MOVF   2D,W
006B:  ANDLW  01
006C:  BTFSS  03.2
006D:  GOTO   071
....................         { 
....................             ___send_bit_to_ic(0); 
006E:  CLRF   2F
006F:  CALL   024
....................         } 
0070:  GOTO   074
....................         else // if buffer divisible by 2 then send bit 1 
....................         { 
....................             ___send_bit_to_ic(1); 
0071:  MOVLW  01
0072:  MOVWF  2F
0073:  CALL   024
....................         }  
....................  
....................         //after each loop, shift left buffer 
....................         if (buffer != 0) 
0074:  MOVF   2D,F
0075:  BTFSC  03.2
0076:  GOTO   079
....................         { 
....................             buffer >>= 1; 
0077:  BCF    03.0
0078:  RRF    2D,F
....................         } 
0079:  INCF   2E,F
007A:  GOTO   066
....................     } 
007B:  RETURN
.................... } 
....................  
.................... // this function send 1 byte to one for the four ic 
.................... void OUTPUT_to_4_74HC595(int8 value,int8 ic) 
.................... { 
....................      ___ic_value[ic-1] = value; 
007C:  MOVLW  01
007D:  SUBWF  2B,W
007E:  ADDLW  23
007F:  MOVWF  04
0080:  BCF    03.7
0081:  MOVF   2A,W
0082:  MOVWF  00
....................        
....................      ___send_byte_to_ic(___ic_value[3]); 
0083:  MOVF   26,W
0084:  MOVWF  2C
0085:  CALL   063
....................      ___send_byte_to_ic(___ic_value[2]); 
0086:  MOVF   25,W
0087:  MOVWF  2C
0088:  CALL   063
....................      ___send_byte_to_ic(___ic_value[1]); 
0089:  MOVF   24,W
008A:  MOVWF  2C
008B:  CALL   063
....................      ___send_byte_to_ic(___ic_value[0]); 
008C:  MOVF   23,W
008D:  MOVWF  2C
008E:  CALL   063
....................      ___upload_value_ic(); 
*
00B8:  RETURN
.................... } 
....................  
....................  
.................... void main() 
*
00CD:  MOVF   03,W
00CE:  ANDLW  1F
00CF:  MOVWF  03
00D0:  MOVLW  40
00D1:  MOVWF  20
00D2:  MOVLW  41
00D3:  MOVWF  21
00D4:  MOVLW  42
00D5:  MOVWF  22
00D6:  BSF    03.5
00D7:  BSF    03.6
00D8:  MOVF   09,W
00D9:  ANDLW  C0
00DA:  MOVWF  09
00DB:  BCF    03.6
00DC:  BCF    1F.4
00DD:  BCF    1F.5
00DE:  MOVLW  00
00DF:  BSF    03.6
00E0:  MOVWF  08
00E1:  BCF    03.5
00E2:  CLRF   07
00E3:  CLRF   08
00E4:  CLRF   09
00E5:  BCF    03.7
.................... { 
....................     
....................    set_tris_d(~0x07); 
*
00EB:  MOVLW  F8
00EC:  BSF    03.5
00ED:  MOVWF  08
....................    char LEDA = 0xff; 
....................    char LEDB = 0xff; 
....................    int mode = 0; 
00EE:  MOVLW  FF
00EF:  BCF    03.5
00F0:  MOVWF  27
00F1:  MOVWF  28
00F2:  CLRF   29
....................  
....................    while(TRUE) 
....................    { 
....................       OUTPUT_to_4_74HC595(LEDA,1); 
00F3:  MOVF   27,W
00F4:  MOVWF  2A
00F5:  MOVLW  01
00F6:  MOVWF  2B
00F7:  CALL   07C
....................       OUTPUT_to_4_74HC595(LEDB,2); 
00F8:  MOVF   28,W
00F9:  MOVWF  2A
00FA:  MOVLW  02
00FB:  MOVWF  2B
00FC:  CALL   07C
....................       delay_ms(100); 
00FD:  MOVLW  64
00FE:  MOVWF  2A
00FF:  CALL   0B9
....................       OUTPUT_to_4_74HC595(LEDA,1);     
0100:  MOVF   27,W
0101:  MOVWF  2A
0102:  MOVLW  01
0103:  MOVWF  2B
0104:  CALL   07C
....................       OUTPUT_to_4_74HC595(LEDB,2);  
0105:  MOVF   28,W
0106:  MOVWF  2A
0107:  MOVLW  02
0108:  MOVWF  2B
0109:  CALL   07C
....................       delay_ms(100); 
010A:  MOVLW  64
010B:  MOVWF  2A
010C:  CALL   0B9
....................        
....................       if(mode == 0) 
010D:  MOVF   29,F
010E:  BTFSS  03.2
010F:  GOTO   11E
....................       { 
....................       LEDA>>=1; 
0110:  BCF    03.0
0111:  RRF    27,F
....................       LEDB<<=1; 
0112:  BCF    03.0
0113:  RLF    28,F
....................       if(LEDA == LEDB&& LEDB == 0) 
0114:  MOVF   28,W
0115:  SUBWF  27,W
0116:  BTFSS  03.2
0117:  GOTO   11D
0118:  MOVF   28,F
0119:  BTFSS  03.2
011A:  GOTO   11D
....................          { 
....................             mode = 1; 
011B:  MOVLW  01
011C:  MOVWF  29
....................          } 
....................       } 
011D:  GOTO   130
....................       else if(mode == 1) 
011E:  DECFSZ 29,W
011F:  GOTO   130
....................       { 
....................          LEDA = ~LEDA; 
0120:  COMF   27,F
....................          LEDB = ~LEDB; 
0121:  COMF   28,F
....................          LEDA<<=1; 
0122:  BCF    03.0
0123:  RLF    27,F
....................          LEDB>>=1; 
0124:  BCF    03.0
0125:  RRF    28,F
....................          LEDA = ~LEDA; 
0126:  COMF   27,F
....................          LEDB = ~LEDB; 
0127:  COMF   28,F
....................          if(LEDA == LEDB&& LEDB == 0xff) 
0128:  MOVF   28,W
0129:  SUBWF  27,W
012A:  BTFSS  03.2
012B:  GOTO   130
012C:  INCFSZ 28,W
012D:  GOTO   130
....................           { 
....................              mode = 2; 
012E:  MOVLW  02
012F:  MOVWF  29
....................           } 
....................       } 
....................        
....................       if(mode == 2) 
0130:  MOVF   29,W
0131:  SUBLW  02
0132:  BTFSS  03.2
0133:  GOTO   141
....................       { 
....................       LEDA<<=1; 
0134:  BCF    03.0
0135:  RLF    27,F
....................       LEDB>>=1; 
0136:  BCF    03.0
0137:  RRF    28,F
....................       if(LEDA == LEDB&& LEDB == 0) 
0138:  MOVF   28,W
0139:  SUBWF  27,W
013A:  BTFSS  03.2
013B:  GOTO   141
013C:  MOVF   28,F
013D:  BTFSS  03.2
013E:  GOTO   141
....................          { 
....................             mode = 3; 
013F:  MOVLW  03
0140:  MOVWF  29
....................          } 
....................       } 
....................       if(mode == 3) 
0141:  MOVF   29,W
0142:  SUBLW  03
0143:  BTFSS  03.2
0144:  GOTO   154
....................       { 
....................        
....................          LEDA = ~LEDA; 
0145:  COMF   27,F
....................          LEDB = ~LEDB; 
0146:  COMF   28,F
....................          LEDA>>=1; 
0147:  BCF    03.0
0148:  RRF    27,F
....................          LEDB<<=1; 
0149:  BCF    03.0
014A:  RLF    28,F
....................          LEDA = ~LEDA; 
014B:  COMF   27,F
....................          LEDB = ~LEDB; 
014C:  COMF   28,F
....................        
....................       if(LEDA == LEDB&& LEDB == 0xff) 
014D:  MOVF   28,W
014E:  SUBWF  27,W
014F:  BTFSS  03.2
0150:  GOTO   154
0151:  INCFSZ 28,W
0152:  GOTO   154
....................          { 
....................             mode = 0; 
0153:  CLRF   29
....................          } 
....................       } 
0154:  GOTO   0F3
....................        
....................     } 
....................        
....................        
....................    } 
....................  
0155:  SLEEP
....................  

Configuration Fuses:
   Word  1: 2CE2   HS NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
