CCS PCM C Compiler, Version 5.025, 39025               04-Oct-22 17:38

               Filename:   C:\Users\du9ng\StudioProjects\PIC16F887\led_sang_dan\main.lst

               ROM used:   567 words (7%)
                           Largest free fragment is 2048
               RAM used:   10 (3%) at main() level
                           15 (4%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   207
0003:  NOP
.................... #include <main.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
0009:  MOVLW  28
000A:  MOVWF  04
000B:  BCF    03.7
000C:  MOVF   00,W
000D:  BTFSC  03.2
000E:  GOTO   01C
000F:  MOVLW  06
0010:  MOVWF  78
0011:  CLRF   77
0012:  DECFSZ 77,F
0013:  GOTO   012
0014:  DECFSZ 78,F
0015:  GOTO   011
0016:  MOVLW  7B
0017:  MOVWF  77
0018:  DECFSZ 77,F
0019:  GOTO   018
001A:  DECFSZ 00,F
001B:  GOTO   00F
001C:  RETURN
....................  
....................  
.................... int16 delay = 100,i; 
.................... void out_d(char value) 
.................... { 
....................       output_d(value); 
001D:  BSF    03.5
001E:  CLRF   08
001F:  BCF    03.5
0020:  MOVF   26,W
0021:  MOVWF  08
....................       delay_ms(delay); 
0022:  MOVF   21,W
0023:  MOVWF  27
0024:  INCF   27,F
0025:  DECF   27,F
0026:  BTFSC  03.2
0027:  GOTO   02C
0028:  MOVLW  FF
0029:  MOVWF  28
002A:  CALL   009
002B:  GOTO   025
002C:  MOVF   20,W
002D:  MOVWF  28
002E:  CALL   009
002F:  RETURN
.................... } 
.................... void out_b(char value) 
.................... { 
....................       output_b(value); 
....................       delay_ms(delay); 
.................... } 
.................... char shilf_lelf(char value,int1 bit) 
.................... { 
....................    return (char)(value<<1)+bit; 
*
0004:  BCF    03.0
0005:  RLF    26,W
0006:  ADDWF  27,W
0007:  MOVWF  78
0008:  RETURN
.................... } 
.................... char shilf_rigth(char value,int1 bit) 
*
0030:  CLRF   28
.................... { 
....................    int8  _bit = 0; 
....................    if(bit == 1) 
0031:  DECFSZ 27,W
0032:  GOTO   035
....................    _bit = 0x80; 
0033:  MOVLW  80
0034:  MOVWF  28
....................    return (value>>1)+_bit; 
0035:  BCF    03.0
0036:  RRF    26,W
0037:  ADDWF  28,W
0038:  MOVWF  78
0039:  RETURN
.................... } 
....................  
.................... //sang dan 8 bit 
.................... void bai_1(){ 
003A:  CLRF   25
....................   unsigned char data = 0; 
....................    //sang dan 
....................    for ( i = 0; i<8; i++) 
003B:  CLRF   23
003C:  CLRF   22
003D:  MOVF   23,F
003E:  BTFSS  03.2
003F:  GOTO   052
0040:  MOVF   22,W
0041:  SUBLW  07
0042:  BTFSS  03.0
0043:  GOTO   052
....................    { 
....................       data = shilf_lelf(data,1); 
0044:  MOVF   25,W
0045:  MOVWF  26
0046:  MOVLW  01
0047:  MOVWF  27
0048:  CALL   004
0049:  MOVF   78,W
004A:  MOVWF  25
....................       out_d(data); 
004B:  MOVF   25,W
004C:  MOVWF  26
004D:  CALL   01D
004E:  INCF   22,F
004F:  BTFSC  03.2
0050:  INCF   23,F
0051:  GOTO   03D
....................    } 
....................    //tat dan 
....................    for ( i  = 0; i <8; i ++) 
0052:  CLRF   23
0053:  CLRF   22
0054:  MOVF   23,F
0055:  BTFSS  03.2
0056:  GOTO   068
0057:  MOVF   22,W
0058:  SUBLW  07
0059:  BTFSS  03.0
005A:  GOTO   068
....................    { 
....................      data = shilf_rigth(data,0); 
005B:  MOVF   25,W
005C:  MOVWF  26
005D:  CLRF   27
005E:  CALL   030
005F:  MOVF   78,W
0060:  MOVWF  25
....................      out_d(data); 
0061:  MOVF   25,W
0062:  MOVWF  26
0063:  CALL   01D
0064:  INCF   22,F
0065:  BTFSC  03.2
0066:  INCF   23,F
0067:  GOTO   054
....................    } 
0068:  BCF    0A.3
0069:  BCF    0A.4
006A:  GOTO   230 (RETURN)
.................... }//bai 1 
....................  
.................... // sang dan 8 bit 
.................... void bai_2(){ 
006B:  CLRF   25
....................    char data = 0; 
....................    //sang dan 
....................    for ( i = 0; i<8; i++) 
006C:  CLRF   23
006D:  CLRF   22
006E:  MOVF   23,F
006F:  BTFSS  03.2
0070:  GOTO   083
0071:  MOVF   22,W
0072:  SUBLW  07
0073:  BTFSS  03.0
0074:  GOTO   083
....................    { 
....................       data = shilf_rigth(data,1); 
0075:  MOVF   25,W
0076:  MOVWF  26
0077:  MOVLW  01
0078:  MOVWF  27
0079:  CALL   030
007A:  MOVF   78,W
007B:  MOVWF  25
....................       out_d(data); 
007C:  MOVF   25,W
007D:  MOVWF  26
007E:  CALL   01D
007F:  INCF   22,F
0080:  BTFSC  03.2
0081:  INCF   23,F
0082:  GOTO   06E
....................    } 
....................    //tat dan 
....................    for ( i = 0; i<8; i++) 
0083:  CLRF   23
0084:  CLRF   22
0085:  MOVF   23,F
0086:  BTFSS  03.2
0087:  GOTO   099
0088:  MOVF   22,W
0089:  SUBLW  07
008A:  BTFSS  03.0
008B:  GOTO   099
....................    { 
....................       data = shilf_lelf(data,0); 
008C:  MOVF   25,W
008D:  MOVWF  26
008E:  CLRF   27
008F:  CALL   004
0090:  MOVF   78,W
0091:  MOVWF  25
....................       out_d(data); 
0092:  MOVF   25,W
0093:  MOVWF  26
0094:  CALL   01D
0095:  INCF   22,F
0096:  BTFSC  03.2
0097:  INCF   23,F
0098:  GOTO   085
....................    } 
0099:  BCF    0A.3
009A:  BCF    0A.4
009B:  GOTO   231 (RETURN)
....................     
.................... }//bai 2 
....................  
.................... // sang dan 16 bit 
.................... void bai_3(){ 
009C:  CLRF   26
009D:  CLRF   25
....................    int16 data = 0; 
....................    // sang dan 
....................     for ( i = 0; i<16; i++) 
009E:  CLRF   23
009F:  CLRF   22
00A0:  MOVF   23,F
00A1:  BTFSS  03.2
00A2:  GOTO   0CF
00A3:  MOVF   22,W
00A4:  SUBLW  0F
00A5:  BTFSS  03.0
00A6:  GOTO   0CF
....................    { 
....................       data = (data << 1)+1; 
00A7:  BCF    03.0
00A8:  RLF    25,W
00A9:  MOVWF  27
00AA:  RLF    26,W
00AB:  MOVWF  28
00AC:  MOVLW  01
00AD:  ADDWF  27,W
00AE:  MOVWF  25
00AF:  MOVF   28,W
00B0:  MOVWF  26
00B1:  BTFSC  03.0
00B2:  INCF   26,F
....................       output_d(data); 
00B3:  BSF    03.5
00B4:  CLRF   08
00B5:  BCF    03.5
00B6:  MOVF   25,W
00B7:  MOVWF  08
....................       output_b(data>>8); 
00B8:  CLRF   28
00B9:  BSF    03.5
00BA:  CLRF   06
00BB:  BCF    03.5
00BC:  MOVF   26,W
00BD:  MOVWF  06
....................       delay_ms(delay); 
00BE:  MOVF   21,W
00BF:  MOVWF  27
00C0:  INCF   27,F
00C1:  DECF   27,F
00C2:  BTFSC  03.2
00C3:  GOTO   0C8
00C4:  MOVLW  FF
00C5:  MOVWF  28
00C6:  CALL   009
00C7:  GOTO   0C1
00C8:  MOVF   20,W
00C9:  MOVWF  28
00CA:  CALL   009
00CB:  INCF   22,F
00CC:  BTFSC  03.2
00CD:  INCF   23,F
00CE:  GOTO   0A0
....................    } 
....................    //tat dan 
....................   for ( i = 0; i<16; i++) 
00CF:  CLRF   23
00D0:  CLRF   22
00D1:  MOVF   23,F
00D2:  BTFSS  03.2
00D3:  GOTO   0F7
00D4:  MOVF   22,W
00D5:  SUBLW  0F
00D6:  BTFSS  03.0
00D7:  GOTO   0F7
....................    { 
....................       data = (data >> 1); 
00D8:  BCF    03.0
00D9:  RRF    26,F
00DA:  RRF    25,F
....................       output_d(data); 
00DB:  BSF    03.5
00DC:  CLRF   08
00DD:  BCF    03.5
00DE:  MOVF   25,W
00DF:  MOVWF  08
....................       output_b(data>>8); 
00E0:  CLRF   28
00E1:  BSF    03.5
00E2:  CLRF   06
00E3:  BCF    03.5
00E4:  MOVF   26,W
00E5:  MOVWF  06
....................       delay_ms(delay); 
00E6:  MOVF   21,W
00E7:  MOVWF  27
00E8:  INCF   27,F
00E9:  DECF   27,F
00EA:  BTFSC  03.2
00EB:  GOTO   0F0
00EC:  MOVLW  FF
00ED:  MOVWF  28
00EE:  CALL   009
00EF:  GOTO   0E9
00F0:  MOVF   20,W
00F1:  MOVWF  28
00F2:  CALL   009
00F3:  INCF   22,F
00F4:  BTFSC  03.2
00F5:  INCF   23,F
00F6:  GOTO   0D1
....................    } 
00F7:  BCF    0A.3
00F8:  BCF    0A.4
00F9:  GOTO   232 (RETURN)
.................... }//bai 3 
....................  
.................... // sang dan 16 bit 
.................... void bai_4(){ 
00FA:  CLRF   26
00FB:  CLRF   25
....................    
....................     int16 data = 0; 
....................    
....................    // sang dan 
....................     for ( i = 0; i<16; i++) 
00FC:  CLRF   23
00FD:  CLRF   22
00FE:  MOVF   23,F
00FF:  BTFSS  03.2
0100:  GOTO   12A
0101:  MOVF   22,W
0102:  SUBLW  0F
0103:  BTFSS  03.0
0104:  GOTO   12A
....................    { 
....................       data = (data >> 1)+0x8000; 
0105:  BCF    03.0
0106:  RRF    26,W
0107:  MOVWF  28
0108:  RRF    25,W
0109:  MOVWF  27
010A:  MOVWF  25
010B:  MOVLW  80
010C:  ADDWF  28,W
010D:  MOVWF  26
....................       output_d(data); 
010E:  BSF    03.5
010F:  CLRF   08
0110:  BCF    03.5
0111:  MOVF   25,W
0112:  MOVWF  08
....................       output_b(data>>8); 
0113:  CLRF   28
0114:  BSF    03.5
0115:  CLRF   06
0116:  BCF    03.5
0117:  MOVF   26,W
0118:  MOVWF  06
....................       delay_ms(delay); 
0119:  MOVF   21,W
011A:  MOVWF  27
011B:  INCF   27,F
011C:  DECF   27,F
011D:  BTFSC  03.2
011E:  GOTO   123
011F:  MOVLW  FF
0120:  MOVWF  28
0121:  CALL   009
0122:  GOTO   11C
0123:  MOVF   20,W
0124:  MOVWF  28
0125:  CALL   009
0126:  INCF   22,F
0127:  BTFSC  03.2
0128:  INCF   23,F
0129:  GOTO   0FE
....................    } 
....................    // tat dan 
....................   for ( i = 0; i<16; i++) 
012A:  CLRF   23
012B:  CLRF   22
012C:  MOVF   23,F
012D:  BTFSS  03.2
012E:  GOTO   152
012F:  MOVF   22,W
0130:  SUBLW  0F
0131:  BTFSS  03.0
0132:  GOTO   152
....................    { 
....................       data = (data << 1); 
0133:  BCF    03.0
0134:  RLF    25,F
0135:  RLF    26,F
....................       output_d(data); 
0136:  BSF    03.5
0137:  CLRF   08
0138:  BCF    03.5
0139:  MOVF   25,W
013A:  MOVWF  08
....................       output_b(data>>8); 
013B:  CLRF   28
013C:  BSF    03.5
013D:  CLRF   06
013E:  BCF    03.5
013F:  MOVF   26,W
0140:  MOVWF  06
....................       delay_ms(delay); 
0141:  MOVF   21,W
0142:  MOVWF  27
0143:  INCF   27,F
0144:  DECF   27,F
0145:  BTFSC  03.2
0146:  GOTO   14B
0147:  MOVLW  FF
0148:  MOVWF  28
0149:  CALL   009
014A:  GOTO   144
014B:  MOVF   20,W
014C:  MOVWF  28
014D:  CALL   009
014E:  INCF   22,F
014F:  BTFSC  03.2
0150:  INCF   23,F
0151:  GOTO   12C
....................    } 
0152:  BCF    0A.3
0153:  BCF    0A.4
0154:  GOTO   233 (RETURN)
....................  
.................... }//bai 4 
....................  
.................... // sang vao sang ra 
.................... void bai_5(){ 
0155:  CLRF   25
0156:  CLRF   26
.................... char data1 = 0, data2 = 0; 
.................... //on in 
.................... for(i = 0; i<8; i++) 
0157:  CLRF   23
0158:  CLRF   22
0159:  MOVF   23,F
015A:  BTFSS  03.2
015B:  GOTO   183
015C:  MOVF   22,W
015D:  SUBLW  07
015E:  BTFSS  03.0
015F:  GOTO   183
.................... { 
....................    data1 = (data1>>1)+128; 
0160:  BCF    03.0
0161:  RRF    25,W
0162:  ADDLW  80
0163:  MOVWF  25
....................    data2 = (data2<<1)+1; 
0164:  BCF    03.0
0165:  RLF    26,W
0166:  ADDLW  01
0167:  MOVWF  26
....................    output_b(data1); 
0168:  BSF    03.5
0169:  CLRF   06
016A:  BCF    03.5
016B:  MOVF   25,W
016C:  MOVWF  06
....................    output_d(data2); 
016D:  BSF    03.5
016E:  CLRF   08
016F:  BCF    03.5
0170:  MOVF   26,W
0171:  MOVWF  08
....................    delay_ms(delay); 
0172:  MOVF   21,W
0173:  MOVWF  27
0174:  INCF   27,F
0175:  DECF   27,F
0176:  BTFSC  03.2
0177:  GOTO   17C
0178:  MOVLW  FF
0179:  MOVWF  28
017A:  CALL   009
017B:  GOTO   175
017C:  MOVF   20,W
017D:  MOVWF  28
017E:  CALL   009
017F:  INCF   22,F
0180:  BTFSC  03.2
0181:  INCF   23,F
0182:  GOTO   159
.................... } 
.................... //off out 
.................... for(i = 0; i<8; i++) 
0183:  CLRF   23
0184:  CLRF   22
0185:  MOVF   23,F
0186:  BTFSS  03.2
0187:  GOTO   1AB
0188:  MOVF   22,W
0189:  SUBLW  07
018A:  BTFSS  03.0
018B:  GOTO   1AB
.................... { 
....................    data2 = (data2>>1); 
018C:  BCF    03.0
018D:  RRF    26,F
....................    data1 = (data1<<1); 
018E:  BCF    03.0
018F:  RLF    25,F
....................    output_b(data1); 
0190:  BSF    03.5
0191:  CLRF   06
0192:  BCF    03.5
0193:  MOVF   25,W
0194:  MOVWF  06
....................    output_d(data2); 
0195:  BSF    03.5
0196:  CLRF   08
0197:  BCF    03.5
0198:  MOVF   26,W
0199:  MOVWF  08
....................    delay_ms(delay); 
019A:  MOVF   21,W
019B:  MOVWF  27
019C:  INCF   27,F
019D:  DECF   27,F
019E:  BTFSC  03.2
019F:  GOTO   1A4
01A0:  MOVLW  FF
01A1:  MOVWF  28
01A2:  CALL   009
01A3:  GOTO   19D
01A4:  MOVF   20,W
01A5:  MOVWF  28
01A6:  CALL   009
01A7:  INCF   22,F
01A8:  BTFSC  03.2
01A9:  INCF   23,F
01AA:  GOTO   185
.................... } 
01AB:  BCF    0A.3
01AC:  BCF    0A.4
01AD:  GOTO   234 (RETURN)
.................... } 
....................  
.................... //chay 1 led 16 bit 
.................... void bai_6(){ 
01AE:  CLRF   26
01AF:  MOVLW  01
01B0:  MOVWF  25
....................    int16 data = 1; 
....................    for(i = 0; i<16;i++) 
01B1:  CLRF   23
01B2:  CLRF   22
01B3:  MOVF   23,F
01B4:  BTFSS  03.2
01B5:  GOTO   1D9
01B6:  MOVF   22,W
01B7:  SUBLW  0F
01B8:  BTFSS  03.0
01B9:  GOTO   1D9
....................    { 
....................       data = (data<<1); 
01BA:  BCF    03.0
01BB:  RLF    25,F
01BC:  RLF    26,F
....................       output_d(data); 
01BD:  BSF    03.5
01BE:  CLRF   08
01BF:  BCF    03.5
01C0:  MOVF   25,W
01C1:  MOVWF  08
....................       output_b(data>>8); 
01C2:  CLRF   28
01C3:  BSF    03.5
01C4:  CLRF   06
01C5:  BCF    03.5
01C6:  MOVF   26,W
01C7:  MOVWF  06
....................       delay_ms(delay); 
01C8:  MOVF   21,W
01C9:  MOVWF  27
01CA:  INCF   27,F
01CB:  DECF   27,F
01CC:  BTFSC  03.2
01CD:  GOTO   1D2
01CE:  MOVLW  FF
01CF:  MOVWF  28
01D0:  CALL   009
01D1:  GOTO   1CB
01D2:  MOVF   20,W
01D3:  MOVWF  28
01D4:  CALL   009
01D5:  INCF   22,F
01D6:  BTFSC  03.2
01D7:  INCF   23,F
01D8:  GOTO   1B3
....................    } 
....................    data = 0x8000; 
01D9:  MOVLW  80
01DA:  MOVWF  26
01DB:  CLRF   25
....................     for(i = 0; i<16;i++) 
01DC:  CLRF   23
01DD:  CLRF   22
01DE:  MOVF   23,F
01DF:  BTFSS  03.2
01E0:  GOTO   204
01E1:  MOVF   22,W
01E2:  SUBLW  0F
01E3:  BTFSS  03.0
01E4:  GOTO   204
....................    { 
....................       data = (data>>1); 
01E5:  BCF    03.0
01E6:  RRF    26,F
01E7:  RRF    25,F
....................       output_d(data); 
01E8:  BSF    03.5
01E9:  CLRF   08
01EA:  BCF    03.5
01EB:  MOVF   25,W
01EC:  MOVWF  08
....................       output_b(data>>8); 
01ED:  CLRF   28
01EE:  BSF    03.5
01EF:  CLRF   06
01F0:  BCF    03.5
01F1:  MOVF   26,W
01F2:  MOVWF  06
....................       delay_ms(delay); 
01F3:  MOVF   21,W
01F4:  MOVWF  27
01F5:  INCF   27,F
01F6:  DECF   27,F
01F7:  BTFSC  03.2
01F8:  GOTO   1FD
01F9:  MOVLW  FF
01FA:  MOVWF  28
01FB:  CALL   009
01FC:  GOTO   1F6
01FD:  MOVF   20,W
01FE:  MOVWF  28
01FF:  CALL   009
0200:  INCF   22,F
0201:  BTFSC  03.2
0202:  INCF   23,F
0203:  GOTO   1DE
....................    } 
0204:  BCF    0A.3
0205:  BCF    0A.4
0206:  GOTO   235 (RETURN)
....................  
.................... } 
....................  
....................  
....................  
.................... void main() 
0207:  MOVF   03,W
0208:  ANDLW  1F
0209:  MOVWF  03
020A:  CLRF   21
020B:  MOVLW  64
020C:  MOVWF  20
020D:  MOVLW  FF
020E:  MOVWF  24
020F:  BSF    03.5
0210:  BSF    03.6
0211:  MOVF   09,W
0212:  ANDLW  C0
0213:  MOVWF  09
0214:  BCF    03.6
0215:  BCF    1F.4
0216:  BCF    1F.5
0217:  MOVLW  00
0218:  BSF    03.6
0219:  MOVWF  08
021A:  BCF    03.5
021B:  CLRF   07
021C:  CLRF   08
021D:  CLRF   09
021E:  BCF    03.7
.................... { 
....................    
....................    set_tris_d(0x00); 
021F:  MOVLW  00
0220:  BSF    03.5
0221:  BCF    03.6
0222:  MOVWF  08
....................    set_tris_b(0x00); 
0223:  MOVWF  06
....................    set_tris_c(0x00); 
0224:  MOVWF  07
0225:  BCF    03.5
0226:  MOVWF  24
....................    output_b(0x00); 
0227:  BSF    03.5
0228:  CLRF   06
0229:  BCF    03.5
022A:  CLRF   06
....................    output_d(0x00); 
022B:  BSF    03.5
022C:  CLRF   08
022D:  BCF    03.5
022E:  CLRF   08
....................     
....................    while(TRUE) 
....................    { 
....................   
....................      bai_1(); 
022F:  GOTO   03A
....................      bai_2(); 
0230:  GOTO   06B
....................      bai_3(); 
0231:  GOTO   09C
....................      bai_4(); 
0232:  GOTO   0FA
....................      bai_5(); 
0233:  GOTO   155
....................      bai_6(); 
0234:  GOTO   1AE
0235:  GOTO   22F
....................    } 
....................  
.................... } 
0236:  SLEEP

Configuration Fuses:
   Word  1: 2CE2   HS NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
